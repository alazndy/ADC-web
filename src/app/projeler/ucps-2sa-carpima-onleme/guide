<!DOCTYPE html>
<html lang="tr" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UCPS-2SA Gelişmiş İnteraktif Kılavuz</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Refined Harmony -->
    <!-- Application Structure Plan: A single-page application with a top navigation bar (Genel Bakış, Teknik Özellikler, Nasıl Çalışır?, Ayarlar) linking to thematic sections. This structure breaks the dense manual into logical, digestible topics. It prioritizes user learning through an interactive simulation of the device's operation and a clickable visual map of the settings menu, which is more effective for understanding processes and hierarchies than linear text. -->
    <!-- Visualization & Content Choices: 1. Technical Specs -> Goal: Compare -> Bar Chart (Chart.js) -> Compare operating temperatures of ECU vs. Main Unit -> Justification: Visual comparison is faster than reading numbers. 2. How it Works -> Goal: Demonstrate Process -> Interactive HTML/CSS Diagram + JS -> User clicks buttons to simulate system states (Active, Passive) -> Justification: Active learning is more engaging and effective for procedural tasks. 3. Settings Menu -> Goal: Organize -> Clickable HTML/CSS Diagram -> User clicks menu item to open a modal with details -> Justification: Visually maps the menu hierarchy, preventing user from getting lost in text descriptions. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <script>
        // On page load or when changing themes, best to add inline in `head` to avoid FOUC
        if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .keypad-btn {
            @apply bg-gray-700 hover:bg-gray-600 text-white font-bold py-3 rounded-lg transition-colors;
        }
        .card {
            @apply bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300;
        }
        .gradient-text {
            @apply bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent dark:from-blue-400 dark:to-indigo-400;
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 text-gray-700 dark:text-gray-300">

    <header class="bg-white/80 dark:bg-gray-900/80 backdrop-blur-xl shadow-sm sticky top-0 z-50">
        <nav class="container mx-auto px-6 py-4">
            <div class="flex justify-between items-center">
                <div class="text-2xl font-extrabold text-gray-900 dark:text-white tracking-tight">UCPS-2SA</div>
                <div class="flex items-center">
                    <div class="hidden md:flex space-x-8">
                        <a href="#genel-bakis" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors duration-300 font-medium">Genel Bakış</a>
                        <a href="#teknik-ozellikler" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors duration-300 font-medium">Teknik Özellikler</a>
                        <a href="#nasil-calisir" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors duration-300 font-medium">Nasıl Çalışır?</a>
                        <a href="#ayarlar" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors duration-300 font-medium">Ayarlar</a>
                    </div>
                    <button id="theme-toggle" class="ml-8 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-500 dark:text-gray-400">
                        <svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
                        <svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm-.707 10.607a1 1 0 010-1.414l.707-.707a1 1 0 111.414 1.414l-.707.707a1 1 0 01-1.414 0zM3 11a1 1 0 100-2H2a1 1 0 100 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
                    </button>
                </div>
            </div>
        </nav>
    </header>

    <main class="container mx-auto px-6 py-12">

        <section id="genel-bakis" class="mb-24">
            <div class="text-center mb-16">
                <h1 class="text-5xl md:text-6xl font-extrabold mb-4 tracking-tight text-gray-900 dark:text-white">
                    <span class="gradient-text">Ultrasonik Çarpma</span><br/> Önleme Sistemi
                </h1>
                <p class="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
                    Bu gelişmiş interaktif kılavuz ile UCPS-2SA sisteminin tüm potansiyelini keşfedin. Sürücü güvenliğini en üst düzeye taşıyan teknolojiyi yakından tanıyın.
                </p>
            </div>

            <div class="grid md:grid-cols-2 gap-8 mb-12">
                <div class="card fade-in-up">
                    <h3 class="text-2xl font-bold mb-3 flex items-center text-gray-900 dark:text-white"><span class="text-2xl mr-3">⚠️</span>Elektrik ve Yangın Güvenliği</h3>
                    <ul class="list-disc list-inside space-y-2 text-gray-500 dark:text-gray-400">
                        <li>Sistem 9-32 V DC ile çalışır. Bağlantı polaritelerine dikkat ediniz.</li>
                        <li>Montaj esnasında sisteme enerji vermeyiniz.</li>
                        <li>Cihaz kasasını kesinlikle açmayınız, bu garantiyi geçersiz kılar.</li>
                    </ul>
                </div>
                <div class="card fade-in-up">
                    <h3 class="text-2xl font-bold mb-3 flex items-center text-gray-900 dark:text-white"><span class="text-2xl mr-3">🚚</span>Taşıma ve Çalıştırma</h3>
                    <ul class="list-disc list-inside space-y-2 text-gray-500 dark:text-gray-400">
                        <li>Sistemi her zaman orijinal kutusunda taşıyınız.</li>
                        <li>Ana ünite IP korumalı değildir, araç dışına monte etmeyiniz.</li>
                        <li>Kabloların güvenli bir şekilde sabitlendiğinden emin olunuz.</li>
                    </ul>
                </div>
            </div>

            <div class="card fade-in-up">
                <h3 class="text-3xl font-bold mb-6 text-center text-gray-900 dark:text-white">Kutu İçeriği</h3>
                 <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead class="bg-gray-50 dark:bg-gray-700/50 rounded-t-lg">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">No</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">Açıklama</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">Model No / P/N</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">Miktar</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-100 dark:divide-gray-700">
                            <tr><td class="px-6 py-4 whitespace-nowrap font-medium text-gray-800 dark:text-gray-200">1</td><td class="px-6 py-4 whitespace-nowrap">UCPS-2SA Ana Ünite</td><td class="px-6 py-4 whitespace-nowrap text-gray-500 dark:text-gray-400">UCPS-2SB-MU</td><td class="px-6 py-4 whitespace-nowrap">1 Ad</td></tr>
                            <tr><td class="px-6 py-4 whitespace-nowrap font-medium text-gray-800 dark:text-gray-200">1a</td><td class="px-6 py-4 whitespace-nowrap">Arka Montaj Plakası</td><td class="px-6 py-4 whitespace-nowrap text-gray-500 dark:text-gray-400">ADC-AMP-02</td><td class="px-6 py-4 whitespace-nowrap">1 Ad</td></tr>
                            <tr><td class="px-6 py-4 whitespace-nowrap font-medium text-gray-800 dark:text-gray-200">2</td><td class="px-6 py-4 whitespace-nowrap">CanBus Kablosu, 4x0.5 mm²</td><td class="px-6 py-4 whitespace-nowrap text-gray-500 dark:text-gray-400">CAN-CAB</td><td class="px-6 py-4 whitespace-nowrap">2 mt</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </section>

        <section id="teknik-ozellikler" class="mb-24">
            <h2 class="text-4xl font-extrabold mb-12 text-center tracking-tight fade-in-up text-gray-900 dark:text-white">Teknik Mükemmellik</h2>
            <div class="grid md:grid-cols-2 gap-8">
                <div class="card fade-in-up">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Sensör Grubu (Brigade)</h3>
                    <ul class="space-y-3 text-gray-600 dark:text-gray-400">
                        <li class="flex items-center"><span class="bg-blue-100 text-blue-800 text-xs font-semibold mr-3 px-2.5 py-0.5 rounded-full">IP69K</span> ECU IP Koruma</li>
                        <li class="flex items-center"><span class="text-blue-800 dark:text-blue-400 font-semibold mr-2">🌡️</span> <strong>Çalışma Sıcaklığı:</strong> -30°C ile +85°C arası</li>
                        <li class="flex items-center"><span class="bg-blue-100 text-blue-800 text-xs font-semibold mr-3 px-2.5 py-0.5 rounded-full">2.5m</span> Algılama Aralığı</li>
                        <li class="flex items-center"><span class="bg-blue-100 text-blue-800 text-xs font-semibold mr-3 px-2.5 py-0.5 rounded-full">200ms</span> Algılama Hızı</li>
                    </ul>
                </div>
                <div class="card fade-in-up">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Akıllı Kontrol Ünitesi</h3>
                    <ul class="space-y-3 text-gray-600 dark:text-gray-400">
                        <li class="flex items-center"><span class="bg-green-100 text-green-800 text-xs font-semibold mr-3 px-2.5 py-0.5 rounded-full">IP44</span> IP Koruma</li>
                        <li class="flex items-center"><span class="text-green-800 dark:text-green-400 font-semibold mr-2">🌡️</span> <strong>Çalışma Sıcaklığı:</strong> -20°C ile +70°C arası</li>
                        <li class="flex items-center"><span class="bg-green-100 text-green-800 text-xs font-semibold mr-3 px-2.5 py-0.5 rounded-full">4.3”</span> TFT LCD Ekran</li>
                         <li class="flex items-center"><span class="bg-green-100 text-green-800 text-xs font-semibold mr-3 px-2.5 py-0.5 rounded-full">Ayarlanabilir</span> Kilitleme Mesafesi</li>
                    </ul>
                </div>
            </div>
        </section>

        <section id="nasil-calisir" class="mb-24">
            <h2 class="text-4xl font-extrabold mb-2 text-center tracking-tight fade-in-up text-gray-900 dark:text-white">İnteraktif Simülasyon</h2>
            <p class="text-center text-gray-600 dark:text-gray-400 mb-10 fade-in-up">Sistemin temel çalışma durumlarını aşağıdaki canlı simülasyon ile deneyimleyin.</p>
            
            <div class="flex flex-col lg:flex-row items-center gap-8 fade-in-up">
                <div class="w-full lg:w-3/5 bg-gray-900 p-2 rounded-2xl shadow-2xl">
                     <div class="bg-gray-800 p-2 rounded-xl">
                        <div id="sim-screen" class="bg-black text-white rounded-lg p-6 min-h-[384px] flex flex-col justify-center items-center transition-all duration-300 relative">
                             <div id="sim-view-normal" class="text-center w-full h-full flex flex-col justify-center items-center">
                                 <div id="sim-status" class="text-4xl font-bold mb-8 tracking-wide">Sistem Aktif</div>
                                 <div class="flex space-x-8">
                                    <div id="sim-left" class="bg-gray-700/50 border border-gray-600 p-8 rounded-lg text-center w-56 transition-all duration-300">
                                        <div class="text-xl font-medium text-gray-300">SOL ARKA</div>
                                        <div id="sim-left-dist" class="text-7xl font-bold">100 cm</div>
                                    </div>
                                    <div id="sim-right" class="bg-gray-700/50 border border-gray-600 p-8 rounded-lg text-center w-56 transition-all duration-300">
                                        <div class="text-xl font-medium text-gray-300">SAĞ ARKA</div>
                                        <div id="sim-right-dist" class="text-7xl font-bold">100 cm</div>
                                    </div>
                                 </div>
                                 <button id="screen-settings-button" class="absolute bottom-6 left-6 bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors text-lg">⚙️ AYARLAR</button>
                             </div>
                             <div id="sim-view-reset" class="hidden text-center">
                                <h3 id="reset-message" class="text-3xl font-bold mb-4 text-yellow-400"></h3>
                                <p class="mb-6 text-xl" id="reset-instruction"></p>
                                <button id="reset-sim-button" class="bg-yellow-500 hover:bg-yellow-400 text-black font-bold py-4 px-10 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-xl" disabled>RESET</button>
                             </div>
                             <div id="sim-view-settings-main" class="hidden text-center w-full">
                                <div class="text-4xl font-bold mb-8 tracking-wide">AYARLAR</div>
                                <div class="space-y-4">
                                    <button id="goto-distance-settings" class="w-full max-w-md mx-auto bg-gray-700 hover:bg-gray-600 text-white font-medium py-4 px-4 rounded-lg transition-colors text-xl">KİLİT MESAFE AYARI</button>
                                    <button id="goto-time-system-settings" class="w-full max-w-md mx-auto bg-gray-700 hover:bg-gray-600 text-white font-medium py-4 px-4 rounded-lg transition-colors text-xl">ZAMAN/SİSTEM AYARLARI</button>
                                    <button id="settings-back-button" class="w-full max-w-md mx-auto mt-8 bg-blue-500 hover:bg-blue-400 text-white font-bold py-4 px-4 rounded-lg transition-colors text-xl">GERİ</button>
                                </div>
                            </div>
                            <div id="sim-view-password" class="hidden text-center w-full max-w-sm">
                                <div class="text-4xl font-bold mb-6 tracking-wide">ŞİFRE GİRİŞİ</div>
                                <div id="password-display" class="w-full h-16 bg-gray-700 rounded-lg mb-6 flex items-center justify-center text-4xl tracking-[.2em]"></div>
                                <div class="grid grid-cols-3 gap-4">
                                    <button onclick="appendPassword('1')" class="keypad-btn">1</button>
                                    <button onclick="appendPassword('2')" class="keypad-btn">2</button>
                                    <button onclick="appendPassword('3')" class="keypad-btn">3</button>
                                    <button onclick="appendPassword('4')" class="keypad-btn">4</button>
                                    <button onclick="appendPassword('5')" class="keypad-btn">5</button>
                                    <button onclick="appendPassword('6')" class="keypad-btn">6</button>
                                    <button onclick="appendPassword('7')" class="keypad-btn">7</button>
                                    <button onclick="appendPassword('8')" class="keypad-btn">8</button>
                                    <button onclick="appendPassword('9')" class="keypad-btn">9</button>
                                    <button onclick="deleteLastChar()" class="keypad-btn bg-yellow-600 hover:bg-yellow-500">SİL</button>
                                    <button onclick="appendPassword('0')" class="keypad-btn">0</button>
                                    <button onclick="checkPassword()" class="keypad-btn bg-green-600 hover:bg-green-500">GİRİŞ</button>
                                </div>
                                <button id="password-back-button" class="w-full mt-6 bg-blue-500 hover:bg-blue-400 text-white font-bold py-3 rounded-lg transition-colors">GERİ</button>
                            </div>
                             <div id="sim-view-settings-distance" class="hidden text-center w-full">
                                <div class="text-3xl font-bold mb-6 tracking-wide">Kilit Mesafe Ayarı</div>
                                <div class="flex justify-center items-center space-x-8">
                                    <div class="p-4 rounded-lg bg-gray-700 w-56">
                                        <div class="text-xl font-medium text-gray-300">SOL ARKA</div>
                                        <div class="flex items-center justify-center space-x-4 my-2">
                                            <button onclick="adjustDistance('left', -10)" class="text-5xl font-bold">-</button>
                                            <div id="distance-left-display" class="text-6xl font-bold w-32">30 cm</div>
                                            <button onclick="adjustDistance('left', 10)" class="text-5xl font-bold">+</button>
                                        </div>
                                    </div>
                                    <div class="p-4 rounded-lg bg-gray-700 w-56">
                                        <div class="text-xl font-medium text-gray-300">SAĞ ARKA</div>
                                         <div class="flex items-center justify-center space-x-4 my-2">
                                            <button onclick="adjustDistance('right', -10)" class="text-5xl font-bold">-</button>
                                            <div id="distance-right-display" class="text-6xl font-bold w-32">30 cm</div>
                                            <button onclick="adjustDistance('right', 10)" class="text-5xl font-bold">+</button>
                                        </div>
                                    </div>
                                </div>
                                <button id="distance-settings-back-button" class="w-full max-w-xs mx-auto mt-8 bg-blue-500 hover:bg-blue-400 text-white font-bold py-3 px-4 rounded-lg transition-colors text-xl">GERİ</button>
                             </div>
                             <div id="sim-view-settings-time-system" class="hidden text-center w-full">
                                <div class="text-3xl font-bold mb-6 tracking-wide">Zaman/Sistem Ayarları</div>
                                <div class="space-y-4">
                                    <button id="goto-time-delay" class="w-full max-w-md mx-auto bg-gray-700 hover:bg-gray-600 text-white font-medium py-3 px-4 rounded-lg transition-colors text-xl">PARK GECİKME ZAMANI</button>
                                    <button id="goto-buzzer" class="w-full max-w-md mx-auto bg-gray-700 hover:bg-gray-600 text-white font-medium py-3 px-4 rounded-lg transition-colors text-xl">BUZZER (ENABLE-DISABLE)</button>
                                    <button id="goto-system" class="w-full max-w-md mx-auto bg-gray-700 hover:bg-gray-600 text-white font-medium py-3 px-4 rounded-lg transition-colors text-xl">TÜM SİSTEM (ENABLE-DISABLE)</button>
                                </div>
                                <button id="time-system-settings-back-button" class="w-full max-w-xs mx-auto mt-8 bg-blue-500 hover:bg-blue-400 text-white font-bold py-3 px-4 rounded-lg transition-colors text-xl">GERİ</button>
                             </div>
                             <div id="sim-view-settings-adjust" class="hidden text-center w-full">
                                <div id="adjust-title" class="text-3xl font-bold mb-6 tracking-wide"></div>
                                <div class="p-4 rounded-lg bg-gray-700 inline-block">
                                    <div class="flex items-center justify-center space-x-4 my-2">
                                        <button onclick="adjustValue(-1)" class="text-5xl font-bold">-</button>
                                        <div id="adjust-value-display" class="text-6xl font-bold w-32"></div>
                                        <button onclick="adjustValue(1)" class="text-5xl font-bold">+</button>
                                    </div>
                                </div>
                                <button id="adjust-back-button" class="w-full max-w-xs mx-auto mt-8 bg-blue-500 hover:bg-blue-400 text-white font-bold py-3 px-4 rounded-lg transition-colors text-xl">GERİ</button>
                             </div>
                              <div id="sim-view-settings-toggle" class="hidden text-center w-full">
                                <div id="toggle-title" class="text-3xl font-bold mb-6 tracking-wide"></div>
                                <div class="space-y-4">
                                    <button id="toggle-enable-button" class="w-full max-w-md mx-auto bg-green-700 hover:bg-green-600 text-white font-medium py-3 px-4 rounded-lg transition-colors text-xl">ENABLE</button>
                                    <button id="toggle-disable-button" class="w-full max-w-md mx-auto bg-red-700 hover:bg-red-600 text-white font-medium py-3 px-4 rounded-lg transition-colors text-xl">DISABLE</button>
                                </div>
                                <button id="toggle-back-button" class="w-full max-w-xs mx-auto mt-8 bg-blue-500 hover:bg-blue-400 text-white font-bold py-3 px-4 rounded-lg transition-colors text-xl">GERİ</button>
                             </div>
                        </div>
                    </div>
                </div>
                <div class="w-full lg:w-2/5 space-y-4">
                    <div class="card">
                         <h4 class="font-bold text-center mb-4 text-gray-900 dark:text-white">Simülasyon Kontrolü</h4>
                         <canvas id="sensor-canvas" width="400" height="250" class="bg-gray-100 dark:bg-gray-700 rounded-lg mx-auto cursor-move"></canvas>
                         <div class="mt-4">
                            <p class="text-center text-sm text-gray-500 dark:text-gray-400">Engeli sürükleyerek sensör mesafelerini değiştirin.</p>
                         </div>
                         <div class="grid grid-cols-2 gap-2 mt-4">
                            <button id="park-brake-button" class="w-full bg-blue-500 text-white font-bold py-2 px-2 rounded-lg hover:bg-blue-600 transition-colors text-sm">🅿️ Park / Fren</button>
                             <button id="mute-button" class="w-full bg-yellow-500 text-white font-bold py-2 px-2 rounded-lg hover:bg-yellow-600 transition-colors text-sm">🔊 Sesi Kapat</button>
                         </div>
                          <div class="grid grid-cols-1 gap-2 mt-2">
                             <button id="push-button" class="w-full bg-gray-600 text-white font-bold py-2 px-2 rounded-lg hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-sm">Arka Push Buton</button>
                         </div>
                    </div>
                </div>
            </div>
            
            <div class="mt-8 text-center">
                <button onclick="document.getElementById('screen-settings-button').click()" class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-bold py-3 px-8 rounded-lg hover:shadow-lg transition-shadow text-lg shadow-md">
                    ⚙️ Simülasyon Ayarlarını Keşfet
                </button>
            </div>


            <div class="mt-24 card fade-in-up">
                <h3 class="text-3xl font-bold mb-8 text-center text-gray-900 dark:text-white">Araç Kilitlendiğinde Reset Prosedürü</h3>
                <div class="relative flex flex-col md:flex-row justify-center items-center">
                    <div class="flex-1 text-center p-4 m-2">
                        <div class="mx-auto w-16 h-16 flex items-center justify-center bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300 rounded-full text-2xl font-bold border-2 border-blue-200 dark:border-blue-700">1</div>
                        <p class="mt-2 font-semibold">Kontrol Et</p>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Araç çevresini 360° kontrol edip fotoğraflayın.</p>
                    </div>
                    <div class="hidden md:block absolute top-1/2 left-1/4 h-1 w-1/4 border-t-2 border-dashed border-gray-300 dark:border-gray-600 -translate-y-1/2"></div>
                     <div class="flex-1 text-center p-4 m-2">
                        <div class="mx-auto w-16 h-16 flex items-center justify-center bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300 rounded-full text-2xl font-bold border-2 border-blue-200 dark:border-blue-700">2</div>
                        <p class="mt-2 font-semibold">Butona Bas</p>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Arka 'Push Buton'a basın.</p>
                    </div>
                    <div class="hidden md:block absolute top-1/2 left-1/2 h-1 w-1/4 border-t-2 border-dashed border-gray-300 dark:border-gray-600 -translate-y-1/2"></div>
                     <div class="flex-1 text-center p-4 m-2">
                        <div class="mx-auto w-16 h-16 flex items-center justify-center bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300 rounded-full text-2xl font-bold border-2 border-blue-200 dark:border-blue-700">3</div>
                        <p class="mt-2 font-semibold">Park'a Al</p>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Vitesi 'Park' konumuna alın.</p>
                    </div>
                    <div class="hidden md:block absolute top-1/2 right-1/4 h-1 w-1/4 border-t-2 border-dashed border-gray-300 dark:border-gray-600 -translate-y-1/2"></div>
                     <div class="flex-1 text-center p-4 m-2">
                        <div class="mx-auto w-16 h-16 flex items-center justify-center bg-green-100 dark:bg-green-900/50 text-green-600 dark:text-green-300 rounded-full text-2xl font-bold border-2 border-green-200 dark:border-green-700">4</div>
                        <p class="mt-2 font-semibold">Resetle</p>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Ekrandaki 'RESET' butonuna basın.</p>
                    </div>
                </div>
            </div>
        </section>

        <section id="ayarlar">
            <h2 class="text-4xl font-extrabold mb-2 text-center tracking-tight fade-in-up text-gray-900 dark:text-white">Ayarlar Menüsü Akış Şeması</h2>
            <p class="text-center text-gray-600 dark:text-gray-400 mb-10 fade-in-up">Ayarlar menüsünün yapısını keşfedin. Detaylar için bir öğeye tıklayın.</p>
            <div class="card fade-in-up">
                <div class="flex flex-col items-center space-y-2">
                    <div class="bg-gray-200 dark:bg-gray-700 p-4 rounded-lg w-72 text-center font-semibold text-lg">Giriş (Şifre Gerekli)</div>
                    <div class="w-1 h-8 bg-gray-300 dark:bg-gray-600"></div>
                    <div class="bg-gray-200 dark:bg-gray-700 p-4 rounded-lg w-72 text-center font-semibold text-lg">Ana Menü</div>
                    <div class="w-1 h-8 bg-gray-300 dark:bg-gray-600"></div>
                     <div class="w-full max-w-3xl h-1 bg-gray-300 dark:bg-gray-600"></div>
                     <div class="flex flex-col md:flex-row justify-between w-full max-w-4xl relative">
                        <div class="w-1 h-8 bg-gray-300 dark:bg-gray-600 absolute left-1/2 -top-8 -translate-x-1/2"></div>
                        <div class="absolute w-1/3 h-1 bg-gray-300 dark:bg-gray-600 left-1/3 top-0"></div>
                        <div class="absolute w-1/3 h-1 bg-gray-300 dark:bg-gray-600 right-1/3 top-0"></div>
                        
                        <div class="flex flex-col items-center flex-1">
                             <div class="w-1 h-8 bg-gray-300 dark:bg-gray-600"></div>
                            <button onclick="showModal('sifre')" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 p-4 rounded-lg w-64 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors font-medium text-center shadow-sm">🔑 Şifre Değiştir</button>
                        </div>
                        <div class="flex flex-col items-center flex-1">
                             <div class="w-1 h-8 bg-gray-300 dark:bg-gray-600"></div>
                            <button onclick="showModal('mesafe')" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 p-4 rounded-lg w-64 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors font-medium text-center shadow-sm">📏 Kilit Mesafe Ayarı</button>
                        </div>
                        <div class="flex flex-col items-center flex-1">
                             <div class="w-1 h-8 bg-gray-300 dark:bg-gray-600"></div>
                            <button onclick="showModal('zaman')" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 p-4 rounded-lg w-64 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors font-medium text-center shadow-sm">⚙️ Zaman/Sistem Ayarları</button>
                        </div>
                     </div>
                </div>
            </div>
        </section>
    </main>

    <footer class="bg-white dark:bg-gray-800 mt-20 py-8 border-t dark:border-gray-700">
        <div class="container mx-auto text-center text-gray-500 dark:text-gray-400">
            <p class="font-semibold">ADC Ultrasonik Çarpma Önleme Sistemi</p>
            <p class="text-sm">PATENT NO: 2024-GE-624945</p>
        </div>
    </footer>
    
    <div id="modal" class="fixed inset-0 bg-black bg-opacity-60 hidden items-center justify-center z-50 p-4 transition-opacity duration-300">
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-lg w-full p-8 relative transform transition-transform duration-300 scale-95">
             <button onclick="closeModal()" class="absolute top-4 right-4 text-gray-400 hover:text-gray-800 dark:hover:text-white text-3xl">&times;</button>
            <h3 id="modal-title" class="text-3xl font-bold mb-4 text-gray-900 dark:text-white"></h3>
            <div id="modal-content" class="text-gray-600 dark:text-gray-300 leading-relaxed"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll('.fade-in-up').forEach(el => {
                observer.observe(el);
            });
            drawVisualization(100, 100);
        });

        let audioCtx;
        let isMuted = false;
        let beepInterval = null;
        let isParked = false;
        let lockTimeout = null;
        let isLocked = false;
        let continuousBeepNode = null;
        let enteredPassword = '';
        let countdownInterval = null;
        let currentSetting = null;

        let simSettings = {
            lockDistanceLeft: 30,
            lockDistanceRight: 30,
            parkDelay: 5,
            buzzerEnabled: true,
            systemEnabled: true
        };

        function setupAudio() {
            if (!audioCtx) {
                try {
                    audioCtx = new (window.AudioContext || window.webkitAudioContext)();
                } catch (e) {
                    console.error('Web Audio API is not supported in this browser');
                }
            }
            if (audioCtx && audioCtx.state === 'suspended') {
                audioCtx.resume();
            }
        }

        function playBeep(duration = 80) {
            if (!audioCtx || !simSettings.buzzerEnabled || isMuted || isParked) return;
            const oscillator = audioCtx.createOscillator();
            const gainNode = audioCtx.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioCtx.destination);
            
            gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);
            oscillator.frequency.setValueAtTime(1600, audioCtx.currentTime);
            oscillator.type = 'sine';
            
            oscillator.start(audioCtx.currentTime);
            oscillator.stop(audioCtx.currentTime + duration / 1000);
        }

        function startContinuousBeep() {
            if (!audioCtx || !simSettings.buzzerEnabled || isMuted || isParked || continuousBeepNode) return;
            continuousBeepNode = audioCtx.createOscillator();
            const gainNode = audioCtx.createGain();
            continuousBeepNode.connect(gainNode);
            gainNode.connect(audioCtx.destination);
            gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);
            continuousBeepNode.frequency.setValueAtTime(1600, audioCtx.currentTime);
            continuousBeepNode.type = 'sine';
            continuousBeepNode.start();
        }

        function stopContinuousBeep() {
            if (continuousBeepNode) {
                continuousBeepNode.stop();
                continuousBeepNode = null;
            }
        }
        
        const statusEl = document.getElementById('sim-status');
        const leftDistEl = document.getElementById('sim-left-dist');
        const rightDistEl = document.getElementById('sim-right-dist');
        const leftBox = document.getElementById('sim-left');
        const rightBox = document.getElementById('sim-right');
        const muteButton = document.getElementById('mute-button');
        const parkBrakeButton = document.getElementById('park-brake-button');
        const pushButton = document.getElementById('push-button');
        const screenSettingsButton = document.getElementById('screen-settings-button');
        const normalView = document.getElementById('sim-view-normal');
        const resetView = document.getElementById('sim-view-reset');
        const settingsMainView = document.getElementById('sim-view-settings-main');
        const passwordView = document.getElementById('sim-view-password');
        const distanceSettingsView = document.getElementById('sim-view-settings-distance');
        const timeSystemSettingsView = document.getElementById('sim-view-settings-time-system');
        const adjustView = document.getElementById('sim-view-settings-adjust');
        const toggleView = document.getElementById('sim-view-settings-toggle');
        const passwordDisplay = document.getElementById('password-display');
        const settingsBackButton = document.getElementById('settings-back-button');
        const passwordBackButton = document.getElementById('password-back-button');
        const distanceSettingsBackButton = document.getElementById('distance-settings-back-button');
        const timeSystemSettingsBackButton = document.getElementById('time-system-settings-back-button');
        const adjustBackButton = document.getElementById('adjust-back-button');
        const toggleBackButton = document.getElementById('toggle-back-button');
        const resetSimButton = document.getElementById('reset-sim-button');
        const resetMessage = document.getElementById('reset-message');
        const resetInstruction = document.getElementById('reset-instruction');
        const distanceLeftDisplay = document.getElementById('distance-left-display');
        const distanceRightDisplay = document.getElementById('distance-right-display');
        const adjustTitle = document.getElementById('adjust-title');
        const adjustValueDisplay = document.getElementById('adjust-value-display');
        const toggleTitle = document.getElementById('toggle-title');
        const toggleEnableButton = document.getElementById('toggle-enable-button');
        const toggleDisableButton = document.getElementById('toggle-disable-button');
        const canvas = document.getElementById('sensor-canvas');
        const ctx = canvas.getContext('2d');
        
        let isDragging = false;
        let obstacle = { x: canvas.width / 2, y: 50, w: 100, h: 60 };

        function clearAllTimers() {
            clearInterval(beepInterval);
            beepInterval = null;
            clearTimeout(lockTimeout);
            lockTimeout = null;
            clearInterval(countdownInterval);
            countdownInterval = null;
            stopContinuousBeep();
        }
        
        function switchSimView(view) {
            clearAllTimers();
            [normalView, resetView, settingsMainView, passwordView, distanceSettingsView, timeSystemSettingsView, adjustView, toggleView].forEach(v => v.classList.add('hidden'));

            if (view === 'normal') {
                normalView.classList.remove('hidden');
                updateSimulationUIAndSound();
            } else if (view === 'reset') {
                resetView.classList.remove('hidden');
            } else if (view === 'password') {
                enteredPassword = '';
                passwordDisplay.textContent = '';
                passwordDisplay.classList.remove('bg-red-500');
                passwordView.classList.remove('hidden');
            } else if (view === 'settings') {
                settingsMainView.classList.remove('hidden');
            } else if (view === 'distance-settings') {
                distanceLeftDisplay.textContent = `${simSettings.lockDistanceLeft} cm`;
                distanceRightDisplay.textContent = `${simSettings.lockDistanceRight} cm`;
                distanceSettingsView.classList.remove('hidden');
            } else if (view === 'time-system-settings') {
                timeSystemSettingsView.classList.remove('hidden');
            } else if (view === 'adjust-value') {
                adjustView.classList.remove('hidden');
            } else if (view === 'toggle-setting') {
                toggleView.classList.remove('hidden');
            }
        }

        muteButton.addEventListener('click', () => {
            isMuted = !isMuted;
            muteButton.innerHTML = isMuted ? '🔇 Sesi Aç' : '🔊 Sesi Kapat';
            
            if (isMuted) {
                clearAllTimers();
            } else {
                setupAudio();
                updateSimulationUIAndSound();
            }
        });

        parkBrakeButton.addEventListener('click', () => {
             if (!simSettings.systemEnabled) return;
            if (countdownInterval) {
                clearAllTimers();
                isParked = true;
                parkBrakeButton.innerHTML = 'Sürüşe Devam';
                statusEl.textContent = 'Sistem Pasif';
                return;
            }

            isParked = !isParked;
            clearAllTimers();

            if (isParked) {
                statusEl.textContent = 'Sistem Pasif';
                parkBrakeButton.innerHTML = 'Sürüşe Devam';
                leftBox.classList.add('opacity-50');
                rightBox.classList.add('opacity-50');
            } else {
                parkBrakeButton.innerHTML = 'İptal Et';
                leftBox.classList.remove('opacity-50');
                rightBox.classList.remove('opacity-50');
                
                let countdown = simSettings.parkDelay;
                if (countdown > 0) {
                    statusEl.textContent = `Sistem ${countdown}sn içinde aktif...`;
                    countdownInterval = setInterval(() => {
                        countdown--;
                        if (countdown > 0) {
                            statusEl.textContent = `Sistem ${countdown}sn içinde aktif...`;
                        } else {
                            clearAllTimers();
                            parkBrakeButton.innerHTML = '🅿️ Park / Fren';
                            updateSimulationUIAndSound();
                        }
                    }, 1000);
                } else {
                    parkBrakeButton.innerHTML = '🅿️ Park / Fren';
                    updateSimulationUIAndSound();
                }
            }
        });
        
        pushButton.addEventListener('click', () => {
            pushButton.disabled = true;
            resetSimButton.disabled = false;
            resetMessage.textContent = "Sistemi Resetlemek İçin";
            resetInstruction.textContent = "<PARKA ALIN> ve RESET Butonuna Dokunun";
        });

        resetSimButton.addEventListener('click', () => {
            isLocked = false;
            pushButton.disabled = true;
            resetSimButton.disabled = true;
            obstacle.y = 50;
            switchSimView('normal');
        });

        screenSettingsButton.addEventListener('click', () => switchSimView('password'));
        settingsBackButton.addEventListener('click', () => switchSimView('normal'));
        passwordBackButton.addEventListener('click', () => switchSimView('normal'));
        distanceSettingsBackButton.addEventListener('click', () => switchSimView('settings'));
        timeSystemSettingsBackButton.addEventListener('click', () => switchSimView('settings'));
        adjustBackButton.addEventListener('click', () => switchSimView('time-system-settings'));
        toggleBackButton.addEventListener('click', () => switchSimView('time-system-settings'));

        document.getElementById('goto-distance-settings').addEventListener('click', () => switchSimView('distance-settings'));
        document.getElementById('goto-time-system-settings').addEventListener('click', () => switchSimView('time-system-settings'));
        
        document.getElementById('goto-time-delay').addEventListener('click', () => openAdjuster('parkDelay'));
        document.getElementById('goto-buzzer').addEventListener('click', () => openToggler('buzzer'));
        document.getElementById('goto-system').addEventListener('click', () => openToggler('system'));
        
        function openAdjuster(setting) {
            currentSetting = setting;
            adjustTitle.textContent = "Park Gecikme Zamanı";
            adjustValueDisplay.textContent = `${simSettings.parkDelay} s`;
            switchSimView('adjust-value');
        }

        function adjustValue(amount) {
            if (currentSetting === 'parkDelay') {
                let current = simSettings.parkDelay;
                current += amount;
                if (current >= 0 && current <= 15) {
                    simSettings.parkDelay = current;
                    adjustValueDisplay.textContent = `${current} s`;
                }
            }
        }

        function openToggler(setting) {
            currentSetting = setting;
            if (setting === 'buzzer') {
                toggleTitle.textContent = "Buzzer Ayarı";
            } else {
                toggleTitle.textContent = "Tüm Sistem Ayarı";
            }
            switchSimView('toggle-setting');
        }

        toggleEnableButton.addEventListener('click', () => {
            if (currentSetting === 'buzzer') simSettings.buzzerEnabled = true;
            if (currentSetting === 'system') simSettings.systemEnabled = true;
            switchSimView('time-system-settings');
        });
        toggleDisableButton.addEventListener('click', () => {
            if (currentSetting === 'buzzer') simSettings.buzzerEnabled = false;
            if (currentSetting === 'system') simSettings.systemEnabled = false;
            switchSimView('time-system-settings');
        });


        function adjustDistance(side, amount) {
            if (side === 'left') {
                let current = simSettings.lockDistanceLeft;
                current += amount;
                if (current >= 30 && current <= 60) {
                    simSettings.lockDistanceLeft = current;
                    distanceLeftDisplay.textContent = `${current} cm`;
                }
            } else {
                let current = simSettings.lockDistanceRight;
                current += amount;
                if (current >= 30 && current <= 60) {
                    simSettings.lockDistanceRight = current;
                    distanceRightDisplay.textContent = `${current} cm`;
                }
            }
        }

        function appendPassword(char) {
            if (enteredPassword.length < 6) {
                enteredPassword += char;
                passwordDisplay.textContent = '*'.repeat(enteredPassword.length);
            }
        }

        function deleteLastChar() {
            enteredPassword = enteredPassword.slice(0, -1);
            passwordDisplay.textContent = '*'.repeat(enteredPassword.length);
        }

        function checkPassword() {
            const correctPassword = '1234';
            if (enteredPassword === correctPassword) {
                switchSimView('settings');
            } else {
                passwordDisplay.classList.add('bg-red-500');
                setTimeout(() => {
                    passwordDisplay.classList.remove('bg-red-500');
                    enteredPassword = '';
                    passwordDisplay.textContent = '';
                }, 500);
            }
        }
        
        function getClosestDistanceToRect(sensorX, sensorY, rect) {
            const closestX = Math.max(rect.x - rect.w / 2, Math.min(sensorX, rect.x + rect.w / 2));
            const closestY = Math.max(rect.y - rect.h / 2, Math.min(sensorY, rect.y + rect.h / 2));
            const dx = sensorX - closestX;
            const dy = sensorY - closestY;
            return Math.sqrt(dx * dx + dy * dy);
        }

        function drawVisualization(cmDistanceLeft, cmDistanceRight) {
            const w = canvas.width;
            const h = canvas.height;
            ctx.clearRect(0, 0, w, h);

            // Draw vehicle
            ctx.fillStyle = document.documentElement.classList.contains('dark') ? '#374151' : '#4a5568';
            ctx.fillRect(w * 0.2, h, w * 0.6, -30);
            
            // Draw sensors
            const sensorLeftX = w * 0.40;
            const sensorRightX = w * 0.60;
            const sensorY = h - 30;
            ctx.fillStyle = '#a0aec0';
            ctx.beginPath();
            ctx.arc(sensorLeftX, sensorY, 5, 0, 2 * Math.PI);
            ctx.fill();
            ctx.beginPath();
            ctx.arc(sensorRightX, sensorY, 5, 0, 2 * Math.PI);
            ctx.fill();

            drawBeam(sensorLeftX, sensorY, cmDistanceLeft, simSettings.lockDistanceLeft);
            drawBeam(sensorRightX, sensorY, cmDistanceRight, simSettings.lockDistanceRight);

            // Draw obstacle
            ctx.fillStyle = '#e53e3e';
            ctx.fillRect(obstacle.x - obstacle.w / 2, obstacle.y - obstacle.h / 2, obstacle.w, obstacle.h);

            // Draw distance text on obstacle
            const roundedDistLeft = Math.round(cmDistanceLeft);
            const roundedDistRight = Math.round(cmDistanceRight);
            ctx.fillStyle = 'white';
            ctx.font = 'bold 12px Inter';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(`L:${roundedDistLeft} R:${roundedDistRight}`, obstacle.x, obstacle.y);
        }

        function drawBeam(x, y, dist, lockDist) {
            const maxRadius = canvas.height * 0.9;
            const radius = (dist / 250) * maxRadius; 
            
            let color = 'rgba(59, 130, 246, 0.2)';
            if (dist <= 60) color = 'rgba(245, 158, 11, 0.3)';
            if (dist <= lockDist) color = 'rgba(239, 68, 68, 0.4)';

            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.arc(x, y, radius, Math.PI, Math.PI * 2);
            ctx.closePath();
            ctx.fill();
        }

        function updateSimulationUIAndSound() {
            if (!simSettings.systemEnabled) {
                statusEl.textContent = 'SİSTEM PASİF';
                parkBrakeButton.disabled = true;
                return;
            }
            parkBrakeButton.disabled = false;
            if (isParked || countdownInterval) return;

            setupAudio();
            
            const sensorLeftX = canvas.width * 0.40;
            const sensorRightX = canvas.width * 0.60;
            const sensorY = canvas.height - 30;
            const scale = 250 / (canvas.height - 30);
            
            const distancePixelsLeft = getClosestDistanceToRect(sensorLeftX, sensorY, obstacle);
            const distancePixelsRight = getClosestDistanceToRect(sensorRightX, sensorY, obstacle);

            const cmDistanceLeft = Math.min(250, distancePixelsLeft * scale);
            const cmDistanceRight = Math.min(250, distancePixelsRight * scale);

            const displayDistanceLeft = Math.round(cmDistanceLeft / 10) * 10;
            const displayDistanceRight = Math.round(cmDistanceRight / 10) * 10;
            const minDistance = Math.min(cmDistanceLeft, cmDistanceRight);

            leftDistEl.textContent = `${displayDistanceLeft} cm`;
            rightDistEl.textContent = `${displayDistanceRight} cm`;

            const baseClasses = 'bg-gray-700/50 border border-gray-600';
            const warningClasses = 'bg-orange-500/80 border border-orange-400';
            const lockClasses = 'bg-red-600/80 border border-red-500';
            
            clearAllTimers();
            drawVisualization(cmDistanceLeft, cmDistanceRight);
            
            leftBox.className = `p-8 rounded-lg text-center w-56 transition-all duration-300 ${cmDistanceLeft <= 60 ? (cmDistanceLeft <= simSettings.lockDistanceLeft ? lockClasses : warningClasses) : baseClasses}`;
            rightBox.className = `p-8 rounded-lg text-center w-56 transition-all duration-300 ${cmDistanceRight <= 60 ? (cmDistanceRight <= simSettings.lockDistanceRight ? lockClasses : warningClasses) : baseClasses}`;

            if (isLocked) {
                switchSimView('reset');
                statusEl.textContent = 'ARAÇ KİLİTLENDİ';
                return;
            }

            if (minDistance <= Math.min(simSettings.lockDistanceLeft, simSettings.lockDistanceRight)) {
                isLocked = true;
                statusEl.textContent = 'ARAÇ KİLİTLENDİ';
                
                if (!isMuted) {
                    startContinuousBeep();
                    setTimeout(stopContinuousBeep, 4000);
                }
                
                setTimeout(() => {
                    pushButton.disabled = false;
                    resetMessage.textContent = "Araç Kilitlendi";
                    resetInstruction.textContent = "Lütfen Arka Push Buton'a basın.";
                    switchSimView('reset');
                }, 10);

            } else if (minDistance <= 60) {
                statusEl.textContent = 'Cisim Algılandı';
                if (!isMuted) {
                    const intervalTime = 120 + (minDistance - Math.min(simSettings.lockDistanceLeft, simSettings.lockDistanceRight)) * 12;
                    beepInterval = setInterval(() => playBeep(80), intervalTime);
                }
            } else {
                statusEl.textContent = 'Sistem Aktif';
            }
        }

        canvas.addEventListener('mousedown', (e) => {
            if(isLocked) return;
            const rect = canvas.getBoundingClientRect();
            const mouseX = e.clientX - rect.left;
            const mouseY = e.clientY - rect.top;

            if (mouseX > obstacle.x - obstacle.w / 2 && mouseX < obstacle.x + obstacle.w / 2 &&
                mouseY > obstacle.y - obstacle.h / 2 && mouseY < obstacle.y + obstacle.h / 2) {
                isDragging = true;
            }
        });

        canvas.addEventListener('mouseup', () => {
            isDragging = false;
        });
        
        canvas.addEventListener('mouseout', () => {
            isDragging = false;
        });

        canvas.addEventListener('mousemove', (e) => {
            if (isDragging) {
                const rect = canvas.getBoundingClientRect();
                obstacle.x = e.clientX - rect.left;
                obstacle.y = e.clientY - rect.top;
                updateSimulationUIAndSound();
            }
        });

        updateSimulationUIAndSound();

        const modalData = {
            'sifre': {
                title: '🔑 Şifre Değiştirme',
                content: `<p>Bu menüden, sisteme giriş için kullanılan 'Kullanıcı' veya 'Admin' şifrelerini değiştirebilirsiniz. Güvenlik için şifrenizi periyodik olarak güncellemeniz önerilir.</p>`
            },
            'mesafe': {
                title: '📏 Kilit Mesafe Ayarı',
                content: `<p>Sol ve sağ arka sensörlerin aracı kilitleyeceği kritik mesafeyi bu ekrandan ayarlayabilirsiniz. '+' ve '-' butonları ile mesafeyi 30 cm ile 60 cm arasında değiştirebilirsiniz. Bu ayar, aracın kullanım alanına ve hassasiyet tercihinize göre optimize edilebilir.</p>`
            },
            'zaman': {
                title: '⚙️ Zaman ve Sistem Ayarları',
                content: `<p>Bu menü altında dört ana ayar bulunur:</p>
                <ul class='list-disc list-inside mt-4 space-y-2'>
                    <li><strong>Park Gecikme Zamanı:</strong> Araç Park'tan çıkarıldığında sistemin ne kadar süre sonra aktif olacağını belirler.</li>
                    <li><strong>Fren Gecikme Zamanı:</strong> Fren bırakıldığında sistemin aktifleşme gecikmesini ayarlar.</li>
                    <li><strong>Buzzer (Enable-Disable):</strong> Sesli uyarıları açar veya kapatır.</li>
                    <li><strong>Tüm Sistem (Enable-Disable):</strong> Bakım veya test gibi durumlar için sistemi tamamen devre dışı bırakır.</li>
                </ul>`
            }
        };

        const modal = document.getElementById('modal');
        const modalContainer = modal.querySelector('div');
        const modalTitle = document.getElementById('modal-title');
        const modalContent = document.getElementById('modal-content');

        function showModal(type) {
            if (modalData[type]) {
                modalTitle.innerHTML = modalData[type].title;
                modalContent.innerHTML = modalData[type].content;
                modal.classList.remove('hidden');
                setTimeout(() => {
                    modal.classList.add('opacity-100');
                    modalContainer.classList.remove('scale-95');
                }, 10);
            }
        }
        
        function closeModal() {
             modal.classList.remove('opacity-100');
             modalContainer.classList.add('scale-95');
             setTimeout(() => {
                modal.classList.add('hidden');
            }, 300);
        }

        modal.addEventListener('click', function(event) {
            if (event.target === modal) {
                closeModal();
            }
        });

        const themeToggleBtn = document.getElementById('theme-toggle');
        const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
        const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

        if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            themeToggleLightIcon.classList.remove('hidden');
        } else {
            themeToggleDarkIcon.classList.remove('hidden');
        }

        themeToggleBtn.addEventListener('click', function() {
            themeToggleDarkIcon.classList.toggle('hidden');
            themeToggleLightIcon.classList.toggle('hidden');
            if (localStorage.getItem('color-theme')) {
                if (localStorage.getItem('color-theme') === 'light') {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('color-theme', 'dark');
                } else {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('color-theme', 'light');
                }
            } else {
                if (document.documentElement.classList.contains('dark')) {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('color-theme', 'light');
                } else {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('color-theme', 'dark');
                }
            }
            drawVisualization(100, 100);
        });
    </script>
</body>
</html>

